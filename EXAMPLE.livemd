# PHP Smart Cell

```elixir
Mix.install([
  {:kino_php, path: "/Users/hbackman/workspace2/kino_php"}
])
```

## PHP Cells

Try out the PHP Smart Cell by clicking `+Smart`, then selecting `PHP Script`.

The default code is prefixed by `<?php`. This is technically not needed, but the code editor won't syntax highlight php without it. The workaround is to include the prefix in the code snippets.

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiI8P3BocFxuXG5mb3IgKCRpID0gMDsgJGkgPCA1OyAkaSsrKSB7XG5cbiAgZndyaXRlKFNURE9VVCwgXCJmb28gJGlcIik7XG4gIGZ3cml0ZShTVERFUlIsIFwiYmFyICRpXCIpO1xuXG4gIHNsZWVwKDEpO1xufVxuIn0","chunks":null,"kind":"Elixir.KinoPHP.ScriptCell","livebook_object":"smart_cell"} -->

```elixir
frame = Kino.Frame.new() |> Kino.render()

"""
<?php

for ($i = 0; $i < 5; $i++) {

  fwrite(STDOUT, "foo $i");
  fwrite(STDERR, "bar $i");

  sleep(1);
}

"""
|> KinoPHP.eval(fn output -> KinoPHP.append_to_frame(frame, output) end)

Kino.nothing()
```

The PHP Script cell will also stream its output, so you don't have to wait for long running scripts to complete before you can see the output.

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiI8P3BocFxuXG50aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbihcInRlc3RcIik7In0","chunks":null,"kind":"Elixir.KinoPHP.ScriptCell","livebook_object":"smart_cell"} -->

```elixir
frame = Kino.Frame.new() |> Kino.render()

"""
<?php

throw new RuntimeException("test");
"""
|> KinoPHP.eval(fn output -> KinoPHP.append_to_frame(frame, output) end)

Kino.nothing()
```

```elixir
frame = Kino.Frame.new() |> Kino.render()

KinoPHP.append_to_frame(frame, "hello")
KinoPHP.append_to_frame(frame, [:green, " world"])
```
